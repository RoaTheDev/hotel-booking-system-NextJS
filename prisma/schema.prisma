// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  GUEST
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique @db.VarChar(255)
  passwordHash String   @map("password_hash") @db.VarChar(255)
  firstName    String   @map("first_name") @db.VarChar(100)
  lastName     String   @map("last_name") @db.VarChar(100)
  phone        String?  @db.VarChar(20)
  role         Role     @default(GUEST)
  isDeleted    Boolean  @default(false) @map("is_deleted")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  bookings Booking[]
  otp      OTP[]

  @@map("users")
}

model OTP {
  id        Int      @id @default(autoincrement())
  otpCode   String   @unique @db.VarChar(6)
  userId    Int
  sessionId String   @db.VarChar(50)
  createdAt DateTime @default(now()) @map("created_at")
  expiresAt DateTime @map("expires_at")

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@index([otpCode])
}

model Amenity {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(100)
  icon        String?  @db.VarChar(255)
  description String?  @db.VarChar(255)
  isActive    Boolean  @default(true) @map("is_active")
  isDeleted   Boolean  @default(false) @map("is_deleted")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  rooms RoomAmenity[]

  @@map("amenities")
}

model RoomType {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(100)
  description String?  @db.VarChar(255)
  basePrice   Decimal  @map("base_price") @db.Decimal(10, 2)
  maxGuests   Int      @map("max_guests")
  imageUrl    String?  @map("image_url") @db.VarChar(255)
  isDeleted   Boolean  @default(false) @map("is_deleted")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  rooms Room[]

  @@map("room_types")
}

model Room {
  id         Int      @id @default(autoincrement())
  roomNumber String   @unique @map("room_number") @db.VarChar(10)
  roomTypeId Int      @map("room_type_id")
  floor      Int?
  isActive   Boolean  @default(true) @map("is_active")
  isDeleted  Boolean  @default(false) @map("is_deleted")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  // Relations
  roomType     RoomType           @relation(fields: [roomTypeId], references: [id])
  amenities    RoomAmenity[]
  bookings     Booking[]
  availability RoomAvailability[]
  images       RoomImage[]

  @@map("rooms")
}

model RoomImage {
  id        Int      @id @default(autoincrement())
  roomId    Int      @map("room_id")
  imageUrl  String   @map("image_url") @db.VarChar(255)
  caption   String?  @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@map("room_images")
}

model RoomAmenity {
  id        Int      @id @default(autoincrement())
  roomId    Int      @map("room_id")
  amenityId Int      @map("amenity_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  room    Room    @relation(fields: [roomId], references: [id], onDelete: Cascade)
  amenity Amenity @relation(fields: [amenityId], references: [id], onDelete: Cascade)

  @@unique([roomId, amenityId])
  @@map("room_amenities")
}

model Booking {
  id                    Int           @id @default(autoincrement())
  userId                Int           @map("user_id")
  roomId                Int           @map("room_id")
  checkIn               DateTime      @map("check_in") @db.Date
  checkOut              DateTime      @map("check_out") @db.Date
  checkInTime           DateTime?     @map("check_in_time")
  checkOutTime          DateTime?     @map("check_out_time")
  guests                Int           @default(1)
  totalAmount           Decimal       @map("total_amount") @db.Decimal(10, 2)
  stripePaymentIntentId String?       @map("stripe_payment_intent_id")
  status                BookingStatus @default(PENDING)
  specialRequests       String?       @map("special_requests") @db.VarChar(255)
  createdAt             DateTime      @default(now()) @map("created_at")
  updatedAt             DateTime      @updatedAt @map("updated_at")

  // Relations
  user User               @relation(fields: [userId], references: [id])
  room Room               @relation(fields: [roomId], references: [id])
  logs BookingStatusLog[]

  @@index([checkIn, checkOut])
  @@map("bookings")
}

model RoomAvailability {
  id          Int      @id @default(autoincrement())
  roomId      Int      @map("room_id")
  date        DateTime @db.Date
  isAvailable Boolean  @default(true) @map("is_available")
  reason      String?  @db.VarChar(255)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@unique([roomId, date])
  @@map("room_availability")
}

model BookingStatusLog {
  id        Int           @id @default(autoincrement())
  bookingId Int           @map("booking_id")
  status    BookingStatus
  createdAt DateTime      @default(now()) @map("created_at")

  booking Booking @relation(fields: [bookingId], references: [id])

  @@map("booking_status_logs")
}
